<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dk.sfs.riskengine.persistence.mapper.DepthPointMapper" >
  
  
  
  <resultMap id="BaseResultMap" type="dk.sfs.riskengine.persistence.domain.DepthPoint">
    
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="lat" property="lat" jdbcType="DOUBLE" />
    <result column="lon" property="lon" jdbcType="DOUBLE" />
    <result column="latp" property="latp" jdbcType="DOUBLE" />
    <result column="lonp" property="lonp" jdbcType="DOUBLE" />
    <result column="n" property="n" jdbcType="INTEGER" />
    <result column="m" property="m" jdbcType="INTEGER" />
    <result column="depth" property="depth" jdbcType="DOUBLE" />
  </resultMap>
  
  <resultMap id="DistanceResultMap" type="dk.sfs.riskengine.persistence.domain.DistanceToPoint" extends="BaseResultMap">
    
    <result column="distance" property="distance" jdbcType="DOUBLE" />
    
  </resultMap>
  
  <sql id="Base_Column_List" >
    
    id, lat, lon, latp, lonp, n, m, depth
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from depth_denmark
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectByIndices" resultMap="BaseResultMap" parameterType="dk.sfs.riskengine.persistence.domain.DepthPoint" >
    
    select 
    <include refid="Base_Column_List" />
    from depth_denmark
    where m= #{m,jdbcType=INTEGER}
    and n= #{n,jdbcType=INTEGER}
  </select>
  
   <select id="findClosestDeepPoint" resultMap="BaseResultMap" parameterType="map" >
    
    SELECT lat, lon,n,m, depth, SQRT(
	POW(69.1 * (lat - #{lat,jdbcType=DOUBLE}), 2) +
	POW(69.1 * (#{lon,jdbcType=DOUBLE} - lon) * COS(lat / 57.3), 2)) AS distance
	FROM depth_denmark 
	HAVING distance <![CDATA[<]]> 0.1
	ORDER BY distance
	limit 0,1;
    
  </select>
  
   <select id="findGroundingPointSE" resultMap="DistanceResultMap" parameterType="map" >
    
    select lat,lon,n,m,depth, 
    SQRT(  POW(69.1 * (lat - 54.480), 2) +  POW(69.1 * (12.151 - lon) * COS(lat / 57.3), 2))  distance 
    from depth_denmark 
    where m<![CDATA[<]]>#{m,jdbcType=INTEGER}
    and n<![CDATA[>]]>#{n,jdbcType=INTEGER}
    and (depth is null or depth <![CDATA[>]]> #{depth,jdbcType=DOUBLE})
    and (#{m,jdbcType=INTEGER}-m) = #{ratio,jdbcType=INTEGER}*(n-#{n,jdbcType=INTEGER})
    ORDER BY distance
    limit 0,1
    
  </select>
  
   <select id="findGroundingPointNW" resultMap="DistanceResultMap" parameterType="map" >
    
   select lat,lon,n,m,depth, 
    SQRT(  POW(69.1 * (lat - 54.480), 2) +  POW(69.1 * (12.151 - lon) * COS(lat / 57.3), 2))  distance 
    from depth_denmark
    where m<![CDATA[>]]>#{m,jdbcType=INTEGER}
    and n<![CDATA[<]]>#{n,jdbcType=INTEGER}
    and (depth is null or depth <![CDATA[>]]> #{depth,jdbcType=DOUBLE})
    and (m-#{m,jdbcType=INTEGER}) = #{ratio,jdbcType=INTEGER}*(#{n,jdbcType=INTEGER}-n)
      ORDER BY distance
    limit 0,1
  </select>
  
   <select id="findGroundingPointNE" resultMap="DistanceResultMap" parameterType="map" >
    
     select lat,lon,n,m,depth, 
    SQRT(  POW(69.1 * (lat - 54.480), 2) +  POW(69.1 * (12.151 - lon) * COS(lat / 57.3), 2))  distance  
    from depth_denmark
    where m<![CDATA[>]]>#{m,jdbcType=INTEGER}
    and n<![CDATA[>]]>#{n,jdbcType=INTEGER}
    and (depth is null or depth <![CDATA[>]]> #{depth,jdbcType=DOUBLE})
    and (m-#{m,jdbcType=INTEGER}) = #{ratio,jdbcType=INTEGER}*(n-#{n,jdbcType=INTEGER})
    ORDER BY distance
    limit 0,1
  </select>
  
  <select id="findGroundingPointSW" resultMap="DistanceResultMap" parameterType="map" >
    
  select lat,lon,n,m,depth, 
    SQRT(  POW(69.1 * (lat - 54.480), 2) +  POW(69.1 * (12.151 - lon) * COS(lat / 57.3), 2))  distance  
    from depth_denmark
    where m<![CDATA[<]]>#{m,jdbcType=INTEGER}
    and n<![CDATA[<]]>#{n,jdbcType=INTEGER}
    and (depth is null or depth <![CDATA[>]]> #{depth,jdbcType=DOUBLE})
    and (#{m,jdbcType=INTEGER}-m) = #{ratio,jdbcType=INTEGER}*(#{n,jdbcType=INTEGER}-n)
    ORDER BY distance
    limit 0,1
  </select>
  
 
 
  
 
</mapper>